Your task is to create a query strategy for a Retrieval Augmented Generation system. The strategy should:

# Instructions
- Analyze the user query and decide whether to use semantic search, full_text search or graph search.
- Identify one or more traits (e.g., Movie, Genre, Character, Setting, Theme, Series) to target.
- Rewrite the user query: 
    - For keyword search, extract ONLY the essential identifying terms (names, entities, specific descriptors) from the user's question. DO NOT include any additional words or reformulate the query. Extract only the raw keywords themselves.
      - GOOD EXAMPLES:
         - For "Who directed Inception?" → "Inception" (just the movie title)
         - For "Tell me about characters in The Godfather" → "The Godfather" (just the film title)
         - For "Are there any horror movies set in Alaska?" → "Alaska horror" (just location and genre)
      - BAD EXAMPLES:
         - "Director of Inception" (contains unnecessary word "Director")
         - "Characters in The Godfather" (includes unnecessary words "characters in")
         - "Horror movies set in Alaska" (includes unnecessary words "movies set in")
    - For semantic search, rewrite the user query to semantically match articles that might be in the knowledge base.
- Provide one, preferably two or more strategies. Make sure each strategy is distinct.
- All SQL searches must return **no more than 20 results**. Use various techniques to select best ones if query matches more, eg. reorder results using semantic search (vector similarity).
- For graph search, use the `MATCH` clause to find related nodes and edges. Use `WITH` clause to create temporary tables for intermediate results.
- For keyword search, use `CONTAINS` clause to find related nodes and edges. 
- Use `TOP 20` in the final result to limit the number of results returned.

# Data model
- There are multiple node tables: `Movie`, `Character`, `Setting`, `Theme`, `Series`, and `Genre`. with following columns with names defined exactly the same in all tables:
    - `Id`: unique identifier for each node. 
    - `Name`: name of the node (e.g., movie title, character name, etc.).
    - `Content`: text content of the node. This must be included in all outputs.
    - `Embedding`: vector representation of the node for semantic search.
- There are multiple edge tables: `IN_GENRE`, `SET_IN`, `INCLUDES_THEME`, `FEATURES_CHARACTER`, `PART_OF_SERIES`.

## SQL schema of used tables
```sql
-- Node Creation: Creating node tables
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Movie]') AND type in (N'U'))
BEGIN
    CREATE TABLE [dbo].[Movie]
    (
        [Id] INT PRIMARY KEY,
        [Name] VARCHAR(200) NOT NULL,
        [Content] VARCHAR(MAX) NULL,
        [Embedding] VECTOR(1998) NULL
    ) AS NODE;
END

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Character]') AND type in (N'U'))
BEGIN
    CREATE TABLE [dbo].[Character]
    (
        [Id] INT PRIMARY KEY,
        [Name] VARCHAR(200) NOT NULL,
        [Content] VARCHAR(MAX) NULL,
        [Embedding] VECTOR(1998) NULL
    ) AS NODE;
END

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Theme]') AND type in (N'U'))
BEGIN
    CREATE TABLE [dbo].[Theme]
    (
        [Id] INT PRIMARY KEY,
        [Name] VARCHAR(200) NOT NULL,
        [Content] VARCHAR(MAX) NULL,
        [Embedding] VECTOR(1998) NULL
    ) AS NODE;
END

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Setting]') AND type in (N'U'))
BEGIN
    CREATE TABLE [dbo].[Setting]
    (
        [Id] INT PRIMARY KEY,
        [Name] VARCHAR(200) NOT NULL,
        [Content] VARCHAR(MAX) NULL,
        [Embedding] VECTOR(1998) NULL
    ) AS NODE;
END

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Series]') AND type in (N'U'))
BEGIN
    CREATE TABLE [dbo].[Series]
    (
        [Id] INT PRIMARY KEY,
        [Name] VARCHAR(200) NOT NULL,
        [Content] VARCHAR(MAX) NULL,
        [Embedding] VECTOR(1998) NULL
    ) AS NODE;
END

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Genre]') AND type in (N'U'))
BEGIN
    CREATE TABLE [dbo].[Genre]
    (
        [Id] INT PRIMARY KEY,
        [Name] VARCHAR(200) NOT NULL,
        [Content] VARCHAR(MAX) NULL,
        [Embedding] VECTOR(1998) NULL
    ) AS NODE;
END

-- Edge Creation: Creating edge tables
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[IN_GENRE]') AND type in (N'U'))
BEGIN
    CREATE TABLE [dbo].[IN_GENRE] AS EDGE;
END

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[FEATURES_CHARACTER]') AND type in (N'U'))
BEGIN
    CREATE TABLE [dbo].[FEATURES_CHARACTER] AS EDGE;
END

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[INCLUDES_THEME]') AND type in (N'U'))
BEGIN
    CREATE TABLE [dbo].[INCLUDES_THEME] AS EDGE;
END

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[SET_IN]') AND type in (N'U'))
BEGIN
    CREATE TABLE [dbo].[SET_IN] AS EDGE;
END

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PART_OF_SERIES]') AND type in (N'U'))
BEGIN
    CREATE TABLE [dbo].[PART_OF_SERIES] AS EDGE;
END
```

# Example strategies
- Rewrite user query for better semantic search and use similarity search on `Movie`
- Rewrite user query for keywords and use fulltext search on `Movie`
- Use semantic search to find `Setting` or `Theme` or `Series` to add its content into results for more context.
- Use keywords with fulltext search on other node tables, eg. to find `Character`, than use graph search to find `Movie` related to that `Character` and lastly get top 10 results by doing semantic search on results.
- Use semantic search on other node tables, eg. to find `Character`, than use graph search to find `Movie` related to that `Character` and lastly get top 10 results by doing semantic search on results.
- Find specific `Movie` and then use graph search to find related Movies ordered by number of shared relations (edges) with the first one.

# Example queries:
- Similarity search on Movie:
```sql
SELECT TOP 10 Id, Content, vector_distance('cosine', Embedding, @q) AS Similarity
FROM [dbo].[Movie]
WHERE Embedding IS NOT NULL AND Content IS NOT NULL
ORDER BY Similarity ASC
```

- Fulltext search on Movie together with semantic search on results to get top 10 results:
```sql
SELECT TOP 10 Id, Content, vector_distance('cosine', Embedding, @q) AS Similarity
FROM [dbo].[Movie]
WHERE CONTAINS (Content, '"Indiana Jones" AND "Temple"')
ORDER BY Similarity ASC
```

- Semantic search on Character, graph search to find Movie related to that Character ans lastly get top 10 results ordered by amount of shared relations (edges) with the first one:
```sql
WITH topcharacters AS (
    SELECT TOP 50 Id, vector_distance('cosine', Embedding, @q) AS Similarity
    FROM [dbo].[Character]
    WHERE Embedding IS NOT NULL AND Content IS NOT NULL
    ORDER BY Similarity ASC
),
MovieMatches AS (
    SELECT TOP 10 m.Content as Content, COUNT(c.Id) AS MatchedCharacterCount
    FROM [dbo].[Movie] m, [dbo].[FEATURES_CHARACTER] fc, [dbo].[Character] c
    WHERE MATCH (m-(fc)->c)
    AND c.Id IN (SELECT Id FROM topcharacters)
    GROUP BY m.Content
)
SELECT TOP 10 Content
FROM MovieMatches
ORDER BY MatchedCharacterCount DESC;
```

- Similarity search on Theme to give more global context:
```sql
SELECT TOP 10 Id, Content, vector_distance('cosine', Embedding, @q) AS Similarity
FROM [dbo].[Theme]
WHERE Embedding IS NOT NULL AND Content IS NOT NULL
ORDER BY Similarity ASC
```
